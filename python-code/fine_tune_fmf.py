import sys
from recommender_systems import matrix_factorization, feature_matrix_factorization
from recommender_systems.modules import matrix, helpers, evaluation
from mongodb import mongodb_communicate

params = {
    "mpd_square_100": [
        (1, 0.0001, 0.1, 10, 250),
        (1, 1.00E-06, 0.1, 10, 100),
        (1, 1.00E-06, 1, 10, 100),
        (1, 1, 0.01, 10, 150),
        (1, 0.0001, 1, 10, 200),
        (1, 1, 10, 10, 100),
        (1, 1.00E-06, 0.1, 10, 200),
        (1, 1, 10, 10, 250),
        (1, 0.01, 10, 10, 150),
        (1, 0.0001, 0.1, 10, 100),
        (1, 1.00E-06, 1, 10, 150),
        (1, 0.0001, 0.1, 10, 150),
        (1, 1, 10, 10, 150),
        (1, 1.00E-06, 0.01, 10, 200),
        (1, 1.00E-06, 1, 10, 250),
        (1, 1, 100, 10, 150),
        (1, 1, 100, 10, 200),
        (1, 0.01, 10, 10, 200),
        (100, 100, 0.1, 110, 250),
        (1, 1, 10, 10, 200),
        (1, 0.0001, 0.01, 10, 100),
        (1, 1, 0.01, 10, 100),
        (100, 100, 0.01, 30, 150),
        (100, 100, 0.1, 10, 100),
        (100, 100, 0.01, 110, 150),
        (1, 0.0001, 1, 10, 150),
        (1, 1, 1, 10, 100),
        (100, 100, 0.1, 70, 150),
        (1, 0.0001, 10, 10, 250),
        (1, 1, 0.01, 10, 200),
        (1, 0.01, 1, 10, 150),
        (1, 0.0001, 1, 10, 100),
        (1, 1.00E-06, 0.1, 10, 150),
        (100, 100, 0.01, 50, 200),
        (100, 100, 0.1, 70, 200),
        (1, 0.01, 1, 10, 200),
        (100, 100, 0.1, 110, 100),
        (1, 0.01, 10, 10, 100),
        (100, 100, 0.01, 30, 250),
        (1, 1.00E-06, 1, 10, 200),
        (1, 0.0001, 0.1, 10, 200),
        (1, 0.0001, 0.01, 10, 200),
        (100, 100, 0.01, 90, 250),
        (1, 1, 0.01, 10, 250),
        (1, 1.00E-06, 0.01, 10, 250),
        (100, 100, 0.1, 110, 200),
        (100, 100, 0.01, 110, 250),
        (1, 0.0001, 10, 10, 200),
        (100, 100, 0.01, 70, 250),
        (100, 1, 10, 30, 100),
        (1, 1, 100, 10, 250),
        (1, 1, 1, 10, 200),
        (100, 100, 0.1, 90, 150),
        (1, 1, 1, 10, 150),
        (100, 100, 0.01, 90, 100),
        (100, 0.01, 0.1, 30, 100),
        (100, 100, 0.01, 110, 200),
        (1, 1.00E-06, 10, 10, 200),
        (1, 1.00E-06, 0.01, 10, 150),
        (100, 100, 0.01, 50, 250),
        (100, 0.0001, 0.01, 30, 150),
        (1, 0.0001, 0.01, 10, 150),
        (1, 1, 0.1, 10, 200),
        (1, 0.0001, 0.01, 10, 250),
        (1, 0.01, 1, 10, 250),
        (1, 0.01, 10, 10, 250),
        (1, 1, 100, 10, 100),
        (100, 0.01, 0.01, 30, 250),
        (100, 100, 0.01, 70, 100),
        (1, 0.0001, 1, 10, 250),
        (1, 1, 0.01, 90, 250),
        (1, 0.01, 1, 10, 100),
        (1, 1.00E-06, 0.1, 10, 250),
        (100, 100, 0.1, 110, 150),
        (1, 0.0001, 10, 10, 150),
        (100, 1, 0.01, 30, 100),
        (100, 0.0001, 0.1, 30, 100),
        (100, 100, 0.01, 10, 200),
        (100, 100, 0.1, 50, 200),
        (100, 1, 1, 30, 250),
        (100, 100, 0.01, 30, 200),
        (1, 1.00E-06, 0.01, 10, 100),
        (1, 1, 1, 10, 250),
        (100, 100, 0.01, 110, 100),
        (100, 100, 0.1, 70, 100),
        (100, 100, 0.01, 10, 100),
        (100, 100, 0.1, 50, 150),
        (100, 0.01, 0.1, 30, 150),
        (100, 100, 0.1, 70, 250),
        (1, 1, 0.01, 90, 100),
        (100, 100, 0.1, 90, 250),
        (100, 0.0001, 0.01, 30, 200),
        (1, 0.0001, 10, 10, 100),
        (1, 1, 0.01, 110, 250),
        (100, 100, 0.1, 30, 150),
        (100, 0.0001, 1, 30, 250),
        (100, 0.0001, 1, 30, 200),
        (1, 1, 0.1, 90, 100),
        (100, 1, 0.01, 30, 200),
        (100, 100, 0.01, 10, 150),
        (1, 1, 0.01, 90, 150),
        (100, 1, 10, 30, 150),
        (100, 0.01, 0.1, 30, 250),
        (1, 1, 0.1, 110, 200),
        (100, 0.0001, 0.01, 30, 250),
        (100, 100, 0.1, 90, 200),
        (1, 1, 0.01, 110, 150),
        (1, 1, 0.01, 110, 200),
        (1, 1, 0.1, 90, 150),
        (100, 1, 1, 30, 150),
        (100, 1.00E-06, 0.01, 30, 100),
        (100, 100, 0.01, 50, 150),
        (100, 0.01, 0.1, 30, 200),
        (100, 100, 0.1, 10, 250),
        (1, 0.01, 100, 10, 200),
        (1, 1, 0.1, 10, 150),
        (100, 100, 0.01, 70, 200),
        (100, 0.01, 0.01, 30, 200),
        (1, 1.00E-06, 10, 10, 250),
        (1, 1, 0.01, 30, 100),
        (100, 1, 10, 30, 250),
        (100, 100, 0.01, 90, 150),
        (100, 100, 0.01, 70, 150),
        (100, 100, 100, 70, 200),
        (100, 1.00E-06, 1, 30, 250),
        (100, 1, 1, 30, 200),
        (1, 1, 0.1, 110, 250),
        (100, 100, 0.1, 10, 200),
        (1, 1.00E-06, 10, 10, 150),
        (100, 100, 0.1, 30, 100),
        (0.01, 0.0001, 100, 10, 100),
        (100, 1.00E-06, 0.01, 30, 150),
        (100, 100, 0.1, 50, 250),
        (1, 0.01, 0.1, 10, 100),
        (100, 100, 0.1, 10, 150),
        (1, 0.01, 0.1, 10, 200),
        (100, 1.00E-06, 0.1, 30, 200),
        (1, 1, 0.01, 70, 250),
        (1, 1, 0.1, 10, 250),
        (100, 1.00E-06, 0.01, 30, 200),
        (1, 0.01, 100, 10, 250),
        (1, 1, 0.01, 90, 200),
        (1, 1.00E-06, 10, 10, 100),
        (1, 1, 0.1, 70, 100),
        (1, 1, 0.1, 70, 150),
        (100, 1, 0.01, 30, 150),
        (1, 1, 0.01, 70, 200),
        (100, 1, 0.1, 30, 250),
        (100, 1.00E-06, 1, 30, 100),
        (100, 100, 100, 30, 200),
        (1, 1, 0.01, 110, 100)
    ],
    "mpd_square_1000": [
        (1, 0.01, 0.001, 30, 150),
        (1, 1, 1, 30, 100),
        (1, 1.00E-06, 0.01, 30, 100),
        (1, 1, 10, 30, 100),
        (1, 1.00E-06, 0.1, 30, 150),
        (1, 0.01, 0.01, 30, 50),
        (1, 1.00E-06, 0.01, 30, 50),
        (1, 1.00E-06, 0.001, 30, 150),
        (1, 1.00E-06, 0.01, 30, 150),
        (1, 1, 0.1, 30, 50),
        (1, 1, 10, 30, 50),
        (1, 0.01, 0.1, 30, 150),
        (1, 1, 10, 30, 150),
        (1, 0.01, 0.01, 30, 150),
        (1, 0.0001, 0.1, 10, 100),
        (1, 1, 0.001, 30, 100),
        (1, 1.00E-06, 1, 30, 150),
        (1, 1, 1, 30, 150),
        (1, 0.01, 0.01, 30, 100),
        (1, 0.0001, 0.01, 30, 50),
        (1, 0.01, 0.001, 30, 50),
        (1, 0.0001, 0.1, 30, 100),
        (1, 1.00E-06, 0.001, 30, 50),
        (1, 0.0001, 0.01, 30, 150),
        (1, 0.0001, 1, 30, 150),
        (1, 1, 1, 30, 50),
        (1, 0.01, 0.1, 30, 100),
        (1, 0.0001, 0.1, 30, 50),
        (1, 1.00E-06, 1, 30, 50),
        (1, 1, 0.001, 30, 150),
        (1, 0.01, 1, 30, 50),
        (1, 0.0001, 1, 30, 100),
        (1, 1, 0.1, 30, 100),
        (1, 1, 10, 50, 100),
        (1, 1.00E-06, 0.1, 30, 50),
        (1, 1.00E-06, 1, 30, 100),
        (1, 1, 0.001, 30, 50),
        (1, 0.01, 10, 30, 150),
        (1, 0.0001, 0.001, 30, 150),
        (1, 0.01, 10, 30, 100),
        (1, 0.0001, 0.001, 30, 50),
        (1, 1, 0.1, 30, 150),
        (1, 0.0001, 0.1, 30, 150),
        (1, 0.0001, 0.001, 30, 100),
        (1, 0.01, 1, 30, 100),
        (1, 1.00E-06, 0.1, 10, 150),
        (1, 1.00E-06, 10, 30, 100),
        (1, 0.0001, 0.01, 30, 100),
        (1, 1, 0.01, 30, 100),
        (1, 0.01, 1, 30, 150),
        (1, 0.01, 0.01, 50, 150),
        (1, 0.01, 0.1, 30, 50),
        (1, 0.01, 0.001, 30, 100),
        (1, 1.00E-06, 0.001, 30, 100),
        (1, 1, 0.001, 10, 50),
        (1, 0.01, 0.01, 10, 50),
        (1, 1, 1, 10, 100),
        (1, 1.00E-06, 10, 50, 150),
        (1, 1.00E-06, 0.001, 10, 100),
        (1, 1.00E-06, 1, 10, 100),
        (1, 1, 10, 50, 150),
        (1, 1, 100, 10, 100),
        (1, 0.01, 10, 10, 150),
        (1, 1, 0.01, 10, 100),
        (1, 1.00E-06, 0.1, 50, 100),
        (1, 1, 10, 10, 100),
        (1, 0.01, 1, 10, 100),
        (1, 1, 100, 30, 100),
        (1, 0.0001, 0.01, 10, 100),
        (1, 0.0001, 10, 30, 150),
        (1, 1, 0.1, 10, 50),
        (1, 0.0001, 0.1, 10, 50),
        (1, 0.0001, 1, 50, 50),
        (1, 1.00E-06, 1, 10, 50),
        (1, 1, 0.001, 50, 150),
        (1, 1.00E-06, 0.1, 30, 100),
        (1, 0.0001, 0.001, 10, 50),
        (1, 1.00E-06, 0.1, 10, 50),
        (1, 0.0001, 10, 30, 100),
        (1, 1.00E-06, 10, 10, 150),
        (1, 1.00E-06, 1, 10, 150),
        (1, 1.00E-06, 0.01, 10, 100),
        (1, 1, 0.01, 30, 150),
        (1, 1, 10, 50, 50),
        (1, 1.00E-06, 0.01, 10, 150),
        (1, 0.0001, 1, 10, 50),
        (1, 1.00E-06, 1, 50, 100),
        (1, 0.01, 1, 50, 50),
        (1, 0.0001, 0.1, 10, 150),
        (1, 0.01, 0.01, 10, 150),
        (1, 0.01, 10, 10, 100),
        (1, 1, 0.001, 50, 50),
        (1, 0.01, 10, 30, 50),
        (1, 1.00E-06, 0.001, 10, 150),
        (1, 1, 0.001, 10, 100),
        (1, 1, 0.01, 30, 50),
        (1, 1, 0.01, 10, 50),
        (1, 0.0001, 0.001, 10, 150),
        (1, 0.0001, 0.01, 50, 150),
        (1, 0.0001, 0.01, 50, 100),
        (1, 1.00E-06, 0.1, 10, 100),
        (1, 1.00E-06, 10, 30, 150),
        (1, 1, 0.01, 10, 150),
        (1, 0.0001, 10, 50, 150),
        (1, 1.00E-06, 10, 10, 50),
        (1, 1.00E-06, 0.01, 50, 100),
        (1, 1, 1, 50, 100),
        (1, 0.01, 1, 10, 50),
        (1, 1, 1, 10, 50),
        (1, 1, 1, 50, 150),
        (1, 1, 100, 10, 150),
        (1, 0.01, 0.001, 50, 150),
        (1, 1, 0.1, 10, 100),
        (1, 0.0001, 0.1, 50, 150),
        (1, 0.01, 0.001, 10, 50),
        (1, 0.0001, 10, 10, 100),
        (1, 1.00E-06, 0.01, 50, 150)
    ]
}

mongo_collection = sys.argv[1]
params = params[mongo_collection]

filename = mongo_collection + "_fmf_fine_tuning.txt"
open("train_data/" + filename, "w").close()
output = open("train_data/" + filename, "a")
output.write("alpha, beta, c, latent_features, steps, NDCG\n")

playlist_dict, unique_track_dict, indexed_pids, indexed_tids = mongodb_communicate.get(mongo_collection)
track_playlist_matrix = matrix.create(playlist_dict, unique_track_dict)

feature_matrix = []
for tid in unique_track_dict.keys():
    feature_matrix.append([
        unique_track_dict[tid]["danceability"],
        unique_track_dict[tid]["energy"],
        unique_track_dict[tid]["valence"]
    ])

N = 10

for param in params:
    train_params = {
        "alpha": param[0],
        "beta": param[1],
        "c": param[2],
        "latent_features": param[3],
        "steps": param[4]
    }
    num_tests = 5
    num_playlists = 100
    avg_ndcg = 0
    for test in range(num_tests):
        results = 0
        for input_playlist_index in range(num_playlists):
            input_pid = indexed_pids[input_playlist_index]

            T, new_playlist_tracks = matrix.split_playlist(input_pid, playlist_dict)
            matrix.update_input_playlist_tracks(input_playlist_index, new_playlist_tracks, track_playlist_matrix, unique_track_dict)

            ranked_tracks = feature_matrix_factorization.train_run(input_playlist_index, indexed_tids, track_playlist_matrix, feature_matrix, train_params)
            recommended_tracks = helpers.recommend_n_tracks(N, ranked_tracks, new_playlist_tracks)
            results += evaluation.ndcg_precision(recommended_tracks, T, N, unique_track_dict)

            matrix.update_input_playlist_tracks(input_playlist_index, new_playlist_tracks + T, track_playlist_matrix, unique_track_dict)

        avg_ndcg += results / num_playlists

    print("{}, {}, {}, {}, {}, NDCG:{}".format(param[0], param[1], param[2], param[3], param[4], avg_ndcg / num_tests))
    output.write("{}, {}, {}, {}, {}, {}\n".format(param[0], param[1], param[2], param[3], param[4], avg_ndcg / num_tests))

print("Wrote results to evaluation_data/" + filename)